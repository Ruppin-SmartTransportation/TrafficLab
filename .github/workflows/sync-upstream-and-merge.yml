name: Sync Fork with Upstream and Auto-Merge to Feature Branch

on:
  # Run on a schedule to check for upstream updates
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'

  # Allow manual trigger
  workflow_dispatch:

jobs:
  sync-and-merge:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    outputs:
      has_updates: ${{ steps.check_upstream.outputs.has_updates }}
      pr_number: ${{ steps.create_pr.outputs.pr_number }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/Turgibot/TrafficLab.git || true
          git remote -v

      - name: Fetch upstream changes
        run: |
          git fetch upstream
          git fetch origin

      - name: Check if upstream has new commits
        id: check_upstream
        run: |
          # Switch to master branch
          git checkout master || git checkout -b master origin/master

          # Get the latest commit from upstream/master
          UPSTREAM_HEAD=$(git rev-parse upstream/master)
          CURRENT_HEAD=$(git rev-parse HEAD)

          echo "upstream_head=$UPSTREAM_HEAD" >> $GITHUB_OUTPUT
          echo "current_head=$CURRENT_HEAD" >> $GITHUB_OUTPUT

          if [ "$UPSTREAM_HEAD" != "$CURRENT_HEAD" ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "Upstream has new commits"
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "No new commits from upstream"
          fi

      - name: Sync master with upstream
        if: steps.check_upstream.outputs.has_updates == 'true'
        run: |
          git checkout master
          git merge upstream/master --no-edit
          git push origin master

      - name: Check if feature branch exists
        if: steps.check_upstream.outputs.has_updates == 'true'
        id: check_feature_branch
        run: |
          if git show-ref --verify --quiet refs/remotes/origin/feature/rm-nginx-to-use-traefik; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Feature branch exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Feature branch does not exist"
            # Create the feature branch from master if it doesn't exist
            git checkout -b feature/rm-nginx-to-use-traefik master
            git push origin feature/rm-nginx-to-use-traefik
          fi

      - name: Create Pull Request
        if: steps.check_upstream.outputs.has_updates == 'true'
        id: create_pr
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:master`,
              base: 'feature/rm-nginx-to-use-traefik'
            });

            if (pulls.length === 0) {
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Sync upstream changes into feature/rm-nginx-to-use-traefik',
                head: 'master',
                base: 'feature/rm-nginx-to-use-traefik',
                body: `This PR syncs the latest changes from upstream (Turgibot/TrafficLab) master branch into the feature/rm-nginx-to-use-traefik branch.

                ## Changes
                - Synced from upstream master
                - Docker images will be built to verify compatibility

                ## Automated Actions
                - ✅ Docker Compose build verification
                - ✅ Auto-merge if all checks pass`
              });

              core.setOutput('pr_number', pr.number);
              console.log(`Created PR #${pr.number}`);
              return pr.number;
            } else {
              core.setOutput('pr_number', pulls[0].number);
              console.log(`PR already exists: #${pulls[0].number}`);
              return pulls[0].number;
            }

  build-and-verify:
    runs-on: ubuntu-latest
    needs: sync-and-merge
    if: needs.sync-and-merge.outputs.has_updates == 'true'

    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: master

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images with docker-compose
        run: |
          docker-compose -f docker-compose.yml build
        timeout-minutes: 30

      - name: Verify build success
        run: |
          echo "Docker images built successfully"
          docker images

  auto-merge:
    runs-on: ubuntu-latest
    needs: [sync-and-merge, build-and-verify]
    if: needs.sync-and-merge.outputs.has_updates == 'true'

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Auto-approve and merge PR
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ needs.sync-and-merge.outputs.pr_number }};

            if (!prNumber) {
              console.log('No PR to merge');
              return;
            }

            try {
              // Check if PR exists and is open
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });

              if (pr.state !== 'open') {
                console.log(`PR #${prNumber} is not open (state: ${pr.state})`);
                return;
              }

              // Approve the PR
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                event: 'APPROVE',
                body: 'Auto-approving after successful Docker build verification.'
              });

              console.log(`Approved PR #${prNumber}`);

              // Merge the PR
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                merge_method: 'merge',
                commit_title: 'Merge upstream changes into feature/rm-nginx-to-use-traefik',
                commit_message: 'Auto-merged after successful build verification'
              });

              console.log(`Merged PR #${prNumber}`);
            } catch (error) {
              console.error('Error during auto-merge:', error.message);
              throw error;
            }
